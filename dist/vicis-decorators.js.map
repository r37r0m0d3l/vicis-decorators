{"version":3,"file":"vicis-decorators.js","sources":["../src/const/config.mjs","../src/const/serializer.mjs","../src/util/clone.mjs","../src/core/functions/getDefaultConfig.mjs","../src/core/functions/validateConfig.mjs","../src/core/decorators/serialize.mjs","../src/util/merge.mjs","../src/core/functions/toJSON.mjs","../src/core/decorators/cast.mjs","../src/core/decorators/defaults.mjs","../src/core/decorators/defined.mjs","../src/core/decorators/exclude.mjs","../src/core/decorators/omit.mjs","../src/core/decorators/rename.mjs","../src/core/decorators/replace.mjs","../src/core/decorators/serializable.mjs","../src/core/decorators/transform.mjs"],"sourcesContent":["export const CONFIG = Symbol(\"__vicis_config__\");\n","export const SERIALIZER = Symbol(\"__vicis_serializer__\");\n","import cloneDeep from \"lodash.clonedeep\";\n\n/**\n * @name clone\n * @description Recursively clones `value`.\n * @param {any} value\n * @returns {any}\n */\nexport function clone(value) {\n  return cloneDeep(value);\n}\n","import { clone } from \"../../util/clone\";\n\nconst vicisConfigDefault = {\n  cast: {},\n  defaults: {},\n  defined: [],\n  exclude: [],\n  omit: [],\n  order: [],\n  pick: [],\n  sort: true,\n  rename: {},\n  replace: {},\n  required: [],\n  transform: {},\n};\n\n/**\n * @name getDefaultConfig\n * @description Get default Vicis configuration.\n * @returns {any}\n */\nexport function getDefaultConfig() {\n  return clone(vicisConfigDefault);\n}\n","import { Vicis } from \"vicis\";\n\nimport { CONFIG } from \"../../const/config\";\nimport { SERIALIZER } from \"../../const/serializer\";\nimport { getDefaultConfig } from \"./getDefaultConfig\";\n\n/**\n * @name validateConfig\n * @description Check wherever serializable object already has Vicis serializer.\n * @param {object} instance\n * @returns {void}\n */\nexport function validateConfig(instance) {\n  if (!instance[CONFIG]) {\n    instance[CONFIG] = getDefaultConfig();\n    instance[SERIALIZER] = Vicis.factory(instance[CONFIG]);\n  }\n}\n","import { CONFIG } from \"../../const/config\";\n\nimport { validateConfig } from \"../functions/validateConfig\";\n\n/**\n * @name serialize\n * @description Mark property or getter as serializable.\n * @param {object|string=} configOfProperty\n * @returns {Function}\n */\nexport function serialize(configOfProperty) {\n  let propertyConfig;\n  if (typeof configOfProperty === \"string\") {\n    propertyConfig = { rename: configOfProperty };\n  } else {\n    propertyConfig = { ...configOfProperty };\n  }\n  /**\n   * @param {object} instance\n   * @param {string} propertyName\n   */\n  return function (instance, propertyName /*, descriptor*/) {\n    validateConfig(instance);\n    const hasConfig = Object.keys(propertyConfig).length > 0;\n    if (hasConfig) {\n      instance[CONFIG].pick.push(propertyName);\n    }\n    Object.keys(propertyConfig).forEach((key) => {\n      switch (key) {\n        case \"defined\":\n          {\n            if (propertyConfig[key] === true) {\n              instance[CONFIG][key].push(propertyName);\n            }\n          }\n          break;\n        case \"exclude\":\n          {\n            if (propertyConfig[key] === true) {\n              instance[CONFIG][key].push(propertyName);\n            }\n          }\n          break;\n        case \"omit\":\n          {\n            if (propertyConfig[key] === true) {\n              instance[CONFIG][key].push(propertyName);\n            }\n          }\n          break;\n        case \"rename\":\n          {\n            instance[CONFIG][key][propertyName] = propertyConfig.rename;\n            instance[CONFIG][\"pick\"].push(propertyConfig.rename);\n          }\n          break;\n        case \"required\":\n          {\n            if (propertyConfig[key] === true) {\n              instance[CONFIG][key].push(propertyName);\n            }\n          }\n          break;\n        default:\n          {\n            let globalConfigProperty = instance[CONFIG][key];\n            if (Array.isArray(globalConfigProperty)) {\n              globalConfigProperty = new Set(globalConfigProperty);\n              globalConfigProperty.add(propertyConfig[key]);\n              globalConfigProperty = Array.from(globalConfigProperty);\n            } else {\n              globalConfigProperty[propertyName] = propertyConfig[key];\n            }\n            instance[CONFIG][key] = globalConfigProperty;\n          }\n          break;\n      }\n    });\n  };\n}\n","import lodashMerge from \"lodash.merge\";\n\n/**\n * @name merge\n * @description Performs deep merges and tracks traversed objects.\n * @param {any} valueOne\n * @param {any} valueTwo\n * @returns {any}\n */\nexport function merge(valueOne, valueTwo) {\n  return lodashMerge(valueOne, valueTwo);\n}\n","import { CONFIG } from \"../../const/config\";\nimport { SERIALIZER } from \"../../const/serializer\";\n\n/**\n * @name toJSON\n * @description Mixin for serialization class.\n * @returns {any}\n */\nexport function toJSON() {\n  const asJSON = new Object(null);\n  const propertiesToSerialize = Array.from(new Set(this[CONFIG].pick));\n  propertiesToSerialize.forEach((propertyName) => {\n    asJSON[propertyName] = this[propertyName];\n  });\n  const serializedData = this[SERIALIZER].data(asJSON).getData();\n  this[SERIALIZER].clear();\n  return serializedData;\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name cast\n * @description Typecast object value to BOOLEAN, NUMERIC, INTEGER, STRING, JSON\n * @param {string} to\n * @returns {Function}\n */\nexport function cast(to) {\n  return serialize({ cast: to });\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name defaults\n * @description In case of property has undefined value it will be replaced with value from configuration\n * @param {any} value\n * @returns {Function}\n */\nexport function defaults(value) {\n  return serialize({ defaults: value });\n}\n","import { CONFIG } from \"../../const/config\";\nimport { validateConfig } from \"../functions/validateConfig\";\n\n/**\n * @name defined\n * @description If value is defined in object - no error thrown.\n * @param {object} instance\n * @param {string} propertyName\n * @returns {void}\n */\nexport function defined(instance, propertyName) {\n  validateConfig(instance);\n  instance[CONFIG][\"defined\"].push(propertyName);\n  instance[CONFIG][\"pick\"].push(propertyName);\n}\n","import { CONFIG } from \"../../const/config\";\nimport { validateConfig } from \"../functions/validateConfig\";\n\n/**\n * @name exclude\n * @description Remove from object listed property.\n * @param {object} instance\n * @param {string} propertyName\n * @returns {void}\n */\nexport function exclude(instance, propertyName) {\n  validateConfig(instance);\n  instance[CONFIG][\"exclude\"].push(propertyName);\n}\n","import { CONFIG } from \"../../const/config\";\nimport { validateConfig } from \"../functions/validateConfig\";\n\n/**\n * @name omit\n * @description Remove property from object. Applies before all other transformations.\n * @param {object} instance\n * @param {string} propertyName\n * @returns {void}\n */\nexport function omit(instance, propertyName) {\n  validateConfig(instance);\n  instance[CONFIG][\"omit\"].push(propertyName);\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name rename\n * @description Rename property to another name and remove original.\n * @param {string} name\n * @returns {Function}\n */\nexport function rename(name) {\n  return serialize(name);\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name replace\n * @description Overrides object value.\n * @param {any} value\n * @returns {Function}\n */\nexport function replace(value) {\n  return serialize({ replace: value });\n}\n","import { Vicis } from \"vicis\";\n\nimport { CONFIG } from \"../../const/config\";\nimport { SERIALIZER } from \"../../const/serializer\";\n\nimport { clone } from \"../../util/clone\";\nimport { getDefaultConfig } from \"../functions/getDefaultConfig\";\nimport { merge } from \"../../util/merge\";\nimport { toJSON } from \"../functions/toJSON\";\n\n/**\n * @name serializable\n * @description Make class ready for serialization.\n * @param {object} config\n * @returns {Function}\n */\nexport function serializable(config) {\n  /**\n   * @param {object} target\n   * @returns {object}\n   */\n  return function (target) {\n    const mergedConfig = merge(getDefaultConfig(), clone(config || {}));\n    const protoConfig = clone(target.prototype[CONFIG] || {});\n    const setConfig = merge(mergedConfig, protoConfig);\n    target.prototype[CONFIG] = setConfig;\n    target.prototype[SERIALIZER] = Vicis.factory(setConfig);\n    target.prototype.toJSON = toJSON;\n    return target;\n  };\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name transform\n * @description Transform property value with function.\n * @param {Function} transformer\n * @returns {Function}\n */\nexport function transform(transformer) {\n  return serialize({ transform: transformer });\n}\n"],"names":["CONFIG","Symbol","SERIALIZER","clone","value","cloneDeep","vicisConfigDefault","cast","defaults","defined","exclude","omit","order","pick","sort","rename","replace","required","transform","getDefaultConfig","validateConfig","instance","Vicis","factory","serialize","configOfProperty","propertyConfig","propertyName","Object","keys","length","push","forEach","key","globalConfigProperty","Array","isArray","Set","add","from","merge","valueOne","valueTwo","lodashMerge","toJSON","asJSON","this","serializedData","data","getData","clear","to","name","serializable","config","target","mergedConfig","setConfig","prototype","transformer"],"mappings":"kfAAO,MAAMA,EAASC,OAAO,oBCAhBC,EAAaD,OAAO,wBCQ1B,SAASE,MAAMC,UACbC,EAAUD,GCPnB,MAAME,EAAqB,CACzBC,KAAM,GACNC,SAAU,GACVC,QAAS,GACTC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPC,KAAM,GACNC,MAAM,EACNC,OAAQ,GACRC,QAAS,GACTC,SAAU,GACVC,UAAW,IAQN,SAASC,0BACPhB,MAAMG,GCXR,SAASc,eAAeC,GACxBA,EAASrB,KACZqB,EAASrB,GAAUmB,mBACnBE,EAASnB,GAAcoB,QAAMC,QAAQF,EAASrB,KCL3C,SAASwB,UAAUC,OACpBC,SAEFA,EAD8B,iBAArBD,EACQ,CAAEV,OAAQU,GAEV,IAAKA,GAMjB,SAAUJ,EAAUM,GACzBP,eAAeC,GACGO,OAAOC,KAAKH,GAAgBI,OAAS,GAErDT,EAASrB,GAAQa,KAAKkB,KAAKJ,GAE7BC,OAAOC,KAAKH,GAAgBM,QAASC,WAC3BA,OACD,cAOA,cAOA,QAE2B,IAAxBP,EAAeO,IACjBZ,EAASrB,GAAQiC,GAAKF,KAAKJ,aAI5B,SAEDN,EAASrB,GAAQiC,GAAKN,GAAgBD,EAAeX,OACrDM,EAASrB,GAAT,KAAyB+B,KAAKL,EAAeX,kBAG5C,YAE2B,IAAxBW,EAAeO,IACjBZ,EAASrB,GAAQiC,GAAKF,KAAKJ,sBAMzBO,EAAuBb,EAASrB,GAAQiC,GACxCE,MAAMC,QAAQF,IAChBA,EAAuB,IAAIG,IAAIH,GAC/BA,EAAqBI,IAAIZ,EAAeO,IACxCC,EAAuBC,MAAMI,KAAKL,IAElCA,EAAqBP,GAAgBD,EAAeO,GAEtDZ,EAASrB,GAAQiC,GAAOC,OChE7B,SAASM,MAAMC,EAAUC,UACvBC,EAAYF,EAAUC,GCFxB,SAASE,eACRC,EAAS,IAAIjB,OAAO,MACIO,MAAMI,KAAK,IAAIF,IAAIS,KAAK9C,GAAQa,OACxCmB,QAASL,IAC7BkB,EAAOlB,GAAgBmB,KAAKnB,WAExBoB,EAAiBD,KAAK5C,GAAY8C,KAAKH,GAAQI,sBAChD/C,GAAYgD,QACVH,SCRF,SAASxC,KAAK4C,UACZ3B,UAAU,CAAEjB,KAAM4C,gBCDpB,SAAS3C,SAASJ,UAChBoB,UAAU,CAAEhB,SAAUJ,eCCxB,SAASK,QAAQY,EAAUM,GAChCP,eAAeC,GACfA,EAASrB,GAAT,QAA4B+B,KAAKJ,GACjCN,EAASrB,GAAT,KAAyB+B,KAAKJ,cCHzB,SAASjB,QAAQW,EAAUM,GAChCP,eAAeC,GACfA,EAASrB,GAAT,QAA4B+B,KAAKJ,WCF5B,SAAShB,KAAKU,EAAUM,GAC7BP,eAAeC,GACfA,EAASrB,GAAT,KAAyB+B,KAAKJ,aCJzB,SAASZ,OAAOqC,UACd5B,UAAU4B,cCDZ,SAASpC,QAAQZ,UACfoB,UAAU,CAAER,QAASZ,oBCOvB,SAASiD,aAAaC,UAKpB,SAAUC,SACTC,EAAehB,MAAMrB,mBAAoBhB,MAAMmD,GAAU,KAEzDG,EAAYjB,MAAMgB,EADJrD,MAAMoD,EAAOG,UAAU1D,IAAW,YAEtDuD,EAAOG,UAAU1D,GAAUyD,EAC3BF,EAAOG,UAAUxD,GAAcoB,QAAMC,QAAQkC,GAC7CF,EAAOG,UAAUd,OAASA,OACnBW,sCCpBJ,SAASrC,UAAUyC,UACjBnC,UAAU,CAAEN,UAAWyC"}
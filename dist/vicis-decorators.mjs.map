{"version":3,"file":"vicis-decorators.mjs","sources":["../src/const/config.mjs","../src/const/serializer.mjs","../src/utils/clone.mjs","../src/config/getDefault.mjs","../src/utils/merge.mjs","../src/hooks/toJSON.mjs","../src/classes/Serialize.mjs","../src/classes/Cast.mjs","../src/classes/Defaults.mjs","../src/utils/argsAsArray.mjs","../src/classes/Exclude.mjs","../src/classes/Omit.mjs","../src/classes/Order.mjs","../src/classes/Pick.mjs","../src/classes/Rename.js","../src/classes/Replace.js","../src/classes/Required.mjs","../src/classes/Transform.mjs","../src/config/validate.mjs","../src/functions/serialize.mjs","../src/functions/cast.mjs","../src/functions/defaults.mjs","../src/functions/defined.mjs","../src/functions/exclude.mjs","../src/functions/omit.mjs","../src/functions/pick.mjs","../src/functions/rename.mjs","../src/functions/replace.mjs","../src/functions/required.mjs","../src/functions/transform.mjs"],"sourcesContent":["export const CONFIG = Symbol(\"__vicis_config__\");\n","export const SERIALIZER = Symbol(\"__vicis_serializer__\");\n","import cloneDeep from \"lodash.clonedeep\";\n\n/**\n * @name clone\n * @description Recursively clones `value`.\n * @param {any} value\n * @returns {any}\n */\nexport function clone(value) {\n  return cloneDeep(value);\n}\n","import { clone } from \"../utils/clone\";\n\nconst vicisConfigDefault = {\n  cast: {},\n  defaults: {},\n  defined: [],\n  exclude: [],\n  omit: [],\n  order: [],\n  pick: [],\n  sort: true,\n  rename: {},\n  replace: {},\n  required: [],\n  transform: {},\n};\n\n/**\n * @name getDefault\n * @description Get default Vicis configuration.\n * @returns {any}\n */\nexport function getDefault() {\n  return clone(vicisConfigDefault);\n}\n","import lodashMerge from \"lodash.merge\";\n\n/**\n * @name merge\n * @description Performs deep merges and tracks traversed objects.\n * @param {any} valueOne\n * @param {any} valueTwo\n * @returns {any}\n */\nexport function merge(valueOne, valueTwo) {\n  return lodashMerge(valueOne, valueTwo);\n}\n","import { CONFIG } from \"../const/config\";\nimport { SERIALIZER } from \"../const/serializer\";\n\n/**\n * @name toJSON\n * @description Mixin for serialization class.\n * @returns {any}\n */\nexport function toJSON() {\n  const asJSON = new Object(null);\n  const propertiesToSerialize = Array.from(new Set(this[CONFIG].pick));\n  propertiesToSerialize.forEach((propertyName) => {\n    asJSON[propertyName] = this[propertyName];\n  });\n  const serializedData = this[SERIALIZER].config(this[CONFIG]).data(asJSON).getData();\n  (async () => {\n    this[SERIALIZER].clear();\n  })();\n  return serializedData;\n}\n","import { Vicis } from \"vicis\";\n\nimport { CONFIG } from \"../const/config\";\nimport { SERIALIZER } from \"../const/serializer\";\n\nimport { clone } from \"../utils/clone\";\nimport { getDefault } from \"../config/getDefault\";\nimport { merge } from \"../utils/merge\";\nimport { toJSON } from \"../hooks/toJSON\";\n\n/**\n * @name Serialize\n * @description Make class ready for serialization.\n * @param {object=} config\n * @returns {Function}\n */\nexport function Serialize(config = {}) {\n  /**\n   * @param {object} target\n   * @returns {object}\n   */\n  return function (target) {\n    if (!Object.is(target.prototype.toJSON, toJSON)) {\n      target.prototype.toJSON = toJSON;\n    }\n    if (CONFIG in target.prototype) {\n      target.prototype[CONFIG] = merge(clone(target.prototype[CONFIG]), clone(config || {}));\n    } else {\n      const mergedConfig = merge(getDefault(), clone(config || {}));\n      const protoConfig = clone(target.prototype[CONFIG] || {});\n      const setConfig = merge(mergedConfig, protoConfig);\n      target.prototype[CONFIG] = setConfig;\n      target.prototype[SERIALIZER] = Vicis.factory(setConfig);\n    }\n    return target;\n  };\n}\n","import { Serialize } from \"./Serialize\";\n\n/**\n * @name Cast\n * @description Typecast object values to BOOLEAN, NUMERIC, INTEGER, STRING, JSON\n * @param {object.<string, string>=} propertiesToCast\n * @returns {Function}\n */\nexport function Cast(propertiesToCast) {\n  return Serialize({ cast: propertiesToCast });\n}\n","import { Serialize } from \"./Serialize\";\n\n/**\n * @name Defaults\n * @description In case of property has undefined value it will be replaced with value from configuration.\n * @param {object.<string, any>=} propertyDefaultValues\n * @returns {Function}\n */\nexport function Defaults(propertyDefaultValues = {}) {\n  return Serialize({ defaults: propertyDefaultValues });\n}\n","/**\n * @name argsAsArray\n * @description Mark property or getter as serializable.\n * @param {Array.<any>|any=} firstArgument\n * @param {...any} restArguments\n * @returns {Function}\n */\nexport function argsAsArray(firstArgument, ...restArguments) {\n  let args;\n  if (firstArgument !== undefined) {\n    if (Array.isArray(firstArgument)) {\n      args = [...firstArgument];\n    } else {\n      args = [firstArgument];\n    }\n  } else {\n    args = [];\n  }\n  if (restArguments.length) {\n    args = args.concat(restArguments);\n  }\n  return args;\n}\n","import { Serialize } from \"./Serialize\";\nimport { argsAsArray } from \"../utils/argsAsArray\";\n\n/**\n * @name Exclude\n * @description Remove from object listed properties.\n * @param {Array.<string|RegExp>=} propertiesToExclude\n * @param {...string|RegExp} exclude\n * @returns {Function}\n */\nexport function Exclude(propertiesToExclude, ...exclude) {\n  return Serialize({ exclude: argsAsArray(propertiesToExclude, ...exclude) });\n}\n","import { Serialize } from \"./Serialize\";\nimport { argsAsArray } from \"../utils/argsAsArray\";\n\n/**\n * @name Omit\n * @description Remove from object listed properties.\n * @param {Array.<string>|string=} propertiesToOmit\n * @param {...string} omit\n * @returns {Function}\n */\nexport function Omit(propertiesToOmit, ...omit) {\n  return Serialize({ omit: argsAsArray(propertiesToOmit, ...omit) });\n}\n","import { Serialize } from \"./Serialize\";\nimport { argsAsArray } from \"../utils/argsAsArray\";\n\n/**\n * @name Order\n * @description Set order of object property names.\n * @param {Array.<string>|string=} propertiesToStreamline\n * @param {...string} order\n * @returns {Function}\n */\nexport function Order(propertiesToStreamline, ...order) {\n  return Serialize({ order: argsAsArray(propertiesToStreamline, ...order) });\n}\n","import { Serialize } from \"./Serialize\";\nimport { argsAsArray } from \"../utils/argsAsArray\";\n\n/**\n * @name Pick\n * @description Mark property or getter as serializable.\n * @param {Array.<string>|string=} propertiesToPick\n * @param {...string} pick\n * @returns {Function}\n */\nexport function Pick(propertiesToPick, ...pick) {\n  return Serialize({ pick: argsAsArray(propertiesToPick, ...pick) });\n}\n","import { Serialize } from \"./Serialize\";\n\n/**\n * @name Rename\n * @description Renames properties to another name and remove original\n * @param {object.<string, string>=} renamePropertyFromTo\n * @returns {Function}\n */\nexport function Rename(renamePropertyFromTo) {\n  return Serialize({ rename: renamePropertyFromTo });\n}\n","import { Serialize } from \"./Serialize\";\n\n/**\n * @name Replace\n * @description Overrides object values\n * @param {object.<string, *>=} replacePropertyValues\n * @returns {Function}\n */\nexport function Replace(replacePropertyValues) {\n  return Serialize({ replace: replacePropertyValues });\n}\n","import { Serialize } from \"./Serialize\";\nimport { argsAsArray } from \"../utils/argsAsArray\";\n\n/**\n * @name Required\n * @description If property defined in object - no error thrown.\n * @param {Array.<string>|string=} propertiesRequired\n * @param {...string} required\n * @returns {Function}\n */\nexport function Required(propertiesRequired, ...required) {\n  return Serialize({ required: argsAsArray(propertiesRequired, ...required) });\n}\n","import { Serialize } from \"./Serialize\";\n\n/**\n * @name Transform\n * @description Transform property values with function\n * @param {object.<string, Function>=} propertyValuesTransformWith\n * @returns {Function}\n */\nexport function Transform(propertyValuesTransformWith) {\n  return Serialize({ transform: propertyValuesTransformWith });\n}\n","import { Vicis } from \"vicis\";\n\nimport { CONFIG } from \"../const/config\";\nimport { SERIALIZER } from \"../const/serializer\";\n\nimport { getDefault } from \"./getDefault\";\n\n/**\n * @name validate\n * @description Check wherever serializable object already has Vicis serializer.\n * @param {object} instance\n * @returns {void}\n */\nexport function validate(instance) {\n  if (!instance[CONFIG]) {\n    instance[CONFIG] = getDefault();\n    instance[SERIALIZER] = Vicis.factory(instance[CONFIG]);\n  }\n}\n","import { CONFIG } from \"../const/config\";\n\nimport { validate } from \"../config/validate\";\n\n/**\n * @name serialize\n * @description Mark property or getter as serializable.\n * @param {object|string=} configOfProperty\n * @returns {Function}\n */\nexport function serialize(configOfProperty) {\n  let propertyConfig;\n  if (typeof configOfProperty === \"string\") {\n    propertyConfig = { rename: configOfProperty };\n  } else {\n    propertyConfig = { ...configOfProperty };\n  }\n  /**\n   * @param {object} instance\n   * @param {string} propertyName\n   */\n  return function (instance, propertyName /*, descriptor*/) {\n    validate(instance);\n    const hasConfig = Object.keys(propertyConfig).length > 0;\n    if (!hasConfig) {\n      instance[CONFIG].pick.push(propertyName);\n    }\n    Object.keys(propertyConfig).forEach((key) => {\n      switch (key) {\n        case \"defined\":\n          {\n            if (propertyConfig[key] === true) {\n              instance[CONFIG][key].push(propertyName);\n            }\n          }\n          break;\n        case \"exclude\":\n          {\n            if (propertyConfig[key] === true) {\n              instance[CONFIG][key].push(propertyName);\n            }\n          }\n          break;\n        case \"omit\":\n          {\n            if (propertyConfig[key] === true) {\n              instance[CONFIG][key].push(propertyName);\n            }\n          }\n          break;\n        case \"rename\":\n          {\n            instance[CONFIG][key][propertyName] = propertyConfig.rename;\n            instance[CONFIG][\"pick\"].push(propertyConfig.rename);\n            instance[CONFIG][\"pick\"].push(propertyName);\n          }\n          break;\n        case \"required\":\n          {\n            if (propertyConfig[key] === true) {\n              instance[CONFIG][key].push(propertyName);\n            }\n          }\n          break;\n        default:\n          {\n            let globalConfigProperty = instance[CONFIG][key];\n            if (Array.isArray(globalConfigProperty)) {\n              globalConfigProperty = new Set(globalConfigProperty);\n              globalConfigProperty.add(propertyConfig[key]);\n              globalConfigProperty = Array.from(globalConfigProperty);\n            } else {\n              globalConfigProperty[propertyName] = propertyConfig[key];\n            }\n            instance[CONFIG][key] = globalConfigProperty;\n          }\n          break;\n      }\n    });\n  };\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name cast\n * @description Typecast object value to BOOLEAN, NUMERIC, INTEGER, STRING, JSON\n * @param {string} to\n * @returns {Function}\n */\nexport function cast(to) {\n  return serialize({ cast: to });\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name defaults\n * @description In case of property has undefined value it will be replaced with value from configuration\n * @param {any} value\n * @returns {Function}\n */\nexport function defaults(value) {\n  return serialize({ defaults: value });\n}\n","import { CONFIG } from \"../const/config\";\n\nimport { validate } from \"../config/validate\";\n\n/**\n * @name defined\n * @description If value is defined in object - no error thrown.\n * @param {object} instance\n * @param {string} propertyName\n * @returns {void}\n */\nexport function defined(instance, propertyName) {\n  validate(instance);\n  instance[CONFIG][\"defined\"].push(propertyName);\n  instance[CONFIG][\"pick\"].push(propertyName);\n}\n","import { CONFIG } from \"../const/config\";\n\nimport { validate } from \"../config/validate\";\n\n/**\n * @name exclude\n * @description Remove from object listed property.\n * @param {object} instance\n * @param {string} propertyName\n * @returns {void}\n */\nexport function exclude(instance, propertyName) {\n  validate(instance);\n  instance[CONFIG][\"exclude\"].push(propertyName);\n}\n","import { CONFIG } from \"../const/config\";\n\nimport { validate } from \"../config/validate\";\n\n/**\n * @name omit\n * @description Remove property from object. Applies before all other transformations.\n * @param {object} instance\n * @param {string} propertyName\n * @returns {void}\n */\nexport function omit(instance, propertyName) {\n  validate(instance);\n  instance[CONFIG][\"omit\"].push(propertyName);\n}\n","import { CONFIG } from \"../const/config\";\n\nimport { validate } from \"../config/validate\";\n\n/**\n * @name pick\n * @description Mark property or getter as serializable.\n * @param {object} instance\n * @param {string} propertyName\n * @returns {void}\n */\nexport function pick(instance, propertyName) {\n  validate(instance);\n  instance[CONFIG][\"pick\"].push(propertyName);\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name rename\n * @description Rename property to another name and remove original.\n * @param {string} name\n * @returns {Function}\n */\nexport function rename(name) {\n  return serialize(name);\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name replace\n * @description Overrides object value.\n * @param {any} value\n * @returns {Function}\n */\nexport function replace(value) {\n  return serialize({ replace: value });\n}\n","import { CONFIG } from \"../const/config\";\n\nimport { validate } from \"../config/validate\";\n\n/**\n * @name required\n * @description If property defined in object - no error thrown.\n * @param {object} instance\n * @param {string} propertyName\n * @returns {void}\n */\nexport function required(instance, propertyName) {\n  validate(instance);\n  instance[CONFIG][\"required\"].push(propertyName);\n}\n","import { serialize } from \"./serialize\";\n\n/**\n * @name transform\n * @description Transform property value with function.\n * @param {Function} transformer\n * @returns {Function}\n */\nexport function transform(transformer) {\n  return serialize({ transform: transformer });\n}\n"],"names":["CONFIG","Symbol","SERIALIZER","clone","value","cloneDeep","vicisConfigDefault","cast","defaults","defined","exclude","omit","order","pick","sort","rename","replace","required","transform","getDefault","merge","valueOne","valueTwo","lodashMerge","toJSON","asJSON","Object","Array","from","Set","this","forEach","propertyName","serializedData","config","data","getData","clear","Serialize","target","is","prototype","mergedConfig","setConfig","Vicis","factory","Cast","propertiesToCast","Defaults","propertyDefaultValues","argsAsArray","firstArgument","restArguments","args","undefined","isArray","length","concat","Exclude","propertiesToExclude","Omit","propertiesToOmit","Order","propertiesToStreamline","Pick","propertiesToPick","Rename","renamePropertyFromTo","Replace","replacePropertyValues","Required","propertiesRequired","Transform","propertyValuesTransformWith","validate","instance","serialize","configOfProperty","propertyConfig","keys","push","key","globalConfigProperty","add","to","name","transformer"],"mappings":"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"}